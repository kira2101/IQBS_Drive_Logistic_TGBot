version: '3.8'

services:
  logistics-bot-db:
    image: postgres:15-alpine
    container_name: logistics-bot-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: logistics_bot
      POSTGRES_USER: logistics_bot_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - logistics_bot_postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - logistics-bot-network
    # Используем нестандартный порт чтобы не конфликтовать с другими postgres на сервере
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U logistics_bot_user -d logistics_bot"]
      interval: 30s
      timeout: 10s
      retries: 3

  logistics-bot-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: logistics-bot-application
    restart: unless-stopped
    depends_on:
      - logistics-bot-db
    environment:
      - BOT_TOKEN=${BOT_TOKEN}
      - DATABASE_URL=postgresql://logistics_bot_user:${POSTGRES_PASSWORD}@logistics-bot-db:5432/logistics_bot
      - REMONLINE_API_KEY=${REMONLINE_API_KEY}
    volumes:
      - ./photos:/app/photos
      - ./reports:/app/reports
      - ./user_logs:/app/user_logs
      - ./settings.json:/app/settings.json
      - ./backups:/app/backups
    networks:
      - logistics-bot-network
    healthcheck:
      test: ["CMD", "python", "/app/healthcheck.py"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Добавляем labels для мониторинга/управления
    labels:
      - "project=logistics-bot"
      - "version=1.0"

volumes:
  logistics_bot_postgres_data:
    driver: local

networks:
  logistics-bot-network:
    driver: bridge
    name: logistics-bot-net